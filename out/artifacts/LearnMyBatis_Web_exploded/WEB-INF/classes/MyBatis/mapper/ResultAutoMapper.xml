<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.dongfang.mybatis.dao.ResultAutoMapper">
    <!--
        eviction:缓存的回收策略
        flushInterval:缓存刷新间隔，缓存多长时间清空一次，默认不清空，设置一个毫秒值
        readOnly:缓存是否只读，true，只读，mybatis认为所有从缓存中获取数据的操作都是只读操作
                    为了加快速度，直接就会将数据在缓存中的引用交给用户，不安全，速度快
                    false 非只读，mybatis获取的数据可能会被修改，mybatis会利用反序列化的技术克隆一份新的数据给你，安全
        size:缓存存放多少数据
        type:指定自定义缓存的全类名
                实现Cache接口即可
    -->
    <cache type="org.mybatis.caches.ehcache.EhcacheCache"/>
<!--    <cache eviction="FIFO" flushInterval="6000" readOnly="false" size="1024"></cache>-->
    <!--
        自定义某个java bean的封装规则
        type: 自定义规则的java类型
        id: 唯一id方便引用
    -->
    <resultMap id="employee" type="com.dongfang.mybatis.bean.Employee">
        <!--
            指定主键列的封装规则
            id定义主键，mybatis底层会有优化
            column 指定数据表中的哪一列
            property 指定对应的java bean的属性
        -->
        <id column="id" property="id"/>

        <!--result: 定义普通列的封装规则-->
        <result column="last_name" property="lastName"/>
        <!--其他不指定的列会自动封装，可以不写，只要写resultMap就把全部的映射规则全部写上-->
        <result column="email" property="email"/>
        <result column="gender" property="gender"/>
    </resultMap>

    <select id="getEmpById" resultMap="employee" useCache="true">
        select * from t_employee where id = #{id};
    </select>

    <!--id last_name gender td_id did dept_name
        联合查询，级联属性封装结果集-->
    <resultMap id="employee_dept" type="com.dongfang.mybatis.bean.Employee">
        <id column="id" property="id"/>
        <result column="last_name" property="lastName"/>
        <result column="gender" property="gender"/>
        <result column="did" property="department.id"/>
        <result column="dept_name" property="department.departmentName"/>
    </resultMap>
    <select id="getEmpAndDeptById" resultMap="employee_dept">
        select te.id id, te.last_name last_name, te.gender gender, te.dept_id td_id,
               td.id did, td.department_name dept_name
        from t_employee te, t_department td
        where te.id = td.id and te.id = #{id};
    </select>

    <resultMap id="employee_dept_associate" type="com.dongfang.mybatis.bean.Employee">
        <id column="id" property="id"/>
        <result column="last_name" property="lastName"/>
        <result column="gender" property="gender"/>
        <!--association可以指定联合的javaBean对象，定义单个对象的封装规则
            property = "dept"指定哪个属性是联合的对象
            javaType 指定这个属性对象的类型【不能省略】-->
        <association property="department" javaType="com.dongfang.mybatis.bean.Department">
            <id column="did" property="id"/>
            <result column="dept_name" property="departmentName"/>
        </association>
    </resultMap>
    <select id="getEmpAndDeptByAssociation" resultMap="employee_dept_associate">
        select te.id id, te.last_name last_name, te.gender gender, te.dept_id td_id,
               td.id did, td.department_name dept_name
        from t_employee te, t_department td
        where te.id = td.id and te.id = #{id};
    </select>


    <!--使用association进行分步查询
        1、先按照员工id查询员工信息
        2、根据员工信息中的d_id值去查出部门信息
        3、将查出的部门设置到员工信息中-->
    <resultMap id="empByStep" type="com.dongfang.mybatis.bean.Employee">
        <id column="id" property="id"/>
        <result column="last_name" property="lastName"/>
        <result column="email" property="email"/>
        <result column="gender" property="gender"/>
        <!--association定义关联对象的封装规则
            select:表明当前属性是调用select指定的方法查出结果
            column:指定将哪一列的值传给select方法
            流程：使用select指定的方法，传入column指定的这列参数的值，查出对象
                并封装给property指定的属性
            -->
        <association property="department" select="com.dongfang.mybatis.dao.DepartmentMapper.getDeptById"
                     column="dept_id"/>
    </resultMap>
    <select id="getEmpStepByStep" resultMap="empByStep">
        select * from t_employee where id = #{id}
    </select>

    <!--
        我们可以使用延迟加载：
            Employee===> Department:
                我们每次查询Employee对象的时候，都将一起查询出来，
                部门信息在我们使用的时候再去查询
                分段查询的基础上再加上两个配置
    -->

    <!--
        场景2：查询部门的时候，将部门对应的所有员工信息也查询出来
    -->

    <select id="getAllEmpByDeptId" resultType="com.dongfang.mybatis.bean.Employee">
        select * from t_employee where dept_id = #{deptId}
    </select>


    <!--discriminator
        鉴别器：mybatis可以使用discriminator判断某列的值，然后根据某列的值改变封装行为
        封装employee为值，
            如果出的是女生，就把部门信息查询出来，否则不查询
            如果是男生，把last_name这一列的值赋给email
    -->
    <resultMap id="empWithDiscriminator" type="com.dongfang.mybatis.bean.Employee">
        <id column="id" property="id"/>
        <result column="last_name" property="lastName"/>
        <result column="email" property="email"/>
        <result column="gender" property="gender"/>

    </resultMap>


</mapper>
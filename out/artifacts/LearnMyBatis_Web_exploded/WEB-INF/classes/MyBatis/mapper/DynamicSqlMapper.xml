<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.dongfang.mybatis.dynamicsql.dao.DynamicSqlMapper">
    <!--
        if
        choose (when otherwise) 分支选择，java中的switch case
                                    如果带了id就用id查，如果带了lastName就用lastName查，只会进入其中一个
        trim (where(封装查询条件) set（封装修改更新条件）)
        foreach
    -->
    <!--查询员工，要求，携带了哪个字段，查询条件就带上这个节段的值
        where后面的条件不是一次性写出来的，而是根据条件判断的
        select *
        from t_employee
        where id = #{employee.id}
          and last_name like #{employee.lastName}
          and email = #{employee.email}
          and gender = #{employee.gender}

        test中写判断表达式 OGNL
        从参数中取值判断
        符号可以使用转义字符
        ognl会进行数字与字符串的转化

            查询的最低点，如果某些条件没带可能 sql拼装会有问题
            查询 的时候，如果第一个条件不带， where 后为and
            SQL: select *   from t_employee  where  and last_name = ?   and email = ?

            where 后面加1 = 1
            where 1 = 1
            select * from t_employee where 1 = 1 and last_name = ? and email = ?

            第二种，使用where 标签将所有查询标签包括在内
                mybatis就会将where标签中拼装的sql里多出来的and or去掉
                只会去掉第一个and，所以将and放在前面，where自动去重
        -->
    <select id="getEmployeesByCondition" resultType="com.dongfang.mybatis.bean.Employee">
        select *
        from t_employee
        <where>
            <if test="employee.id != null">
                id = #{employee.id}
            </if>

            <if test="employee.lastName != null and employee.lastName != ''">
                and last_name = #{employee.lastName}
            </if>

            <if test="employee.email != null and employee.email.trim() != ''">
                and email = #{employee.email}
            </if>

            <if test="employee.gender == 0 or employee.gender == 1">
                and gender = #{employee.gender}
            </if>
        </where>
    </select>


    <!--
        自定义字符串的截取规则
            后面多出的and 或者or where标签不能解决
            prefix=""           前缀；trim标签体中是整个字符串拼串后的结果
                                prefix给拼串后的整个字符串加一个前缀
            prefixOverrides=""  前缀覆盖：去掉整个字符串前面多余的字符
            suffix=""           后缀
                                suffix给拼串后的整个字符串加一个后缀
            suffixOverrides=""  后缀覆盖：去掉整个字符串后面多余的字符
    -->
    <select id="getEmployeesByConditionTrim" resultType="com.dongfang.mybatis.bean.Employee">
        select *
        from t_employee
        <trim prefix="where" suffixOverrides="and">
            <if test="employee.id != null">
                id = #{employee.id} and
            </if>

            <if test="employee.lastName != null and employee.lastName != ''">
                last_name = #{employee.lastName} and
            </if>

            <if test="employee.email != null and employee.email.trim() != ''">
                email = #{employee.email} and
            </if>

            <if test="employee.gender == 0 or employee.gender == 1">
                gender = #{employee.gender}
            </if>
        </trim>
    </select>


    <!--如果带了id就用id查，如果带了lastName就用lastName查，只会进入其中一个

    -->
    <select id="getEmployeesByConditionChoose" resultType="com.dongfang.mybatis.bean.Employee">
        select *
        from t_employee
        <where>
            <choose>
                <when test="employee.id != null">
                    id = #{employee.id}
                </when>

                <when test="employee.lastName != null and employee.lastName.trim() != ''">
                    last_name like #{employee.lastName}
                </when>

                <when test="employee.email != null and employee.email.trim() != ''">
                    email = #{employee.email}
                </when>

                <otherwise>
                    1 = 1
                </otherwise>
            </choose>
        </where>
    </select>


    <!--set标签，设置更新条件，会去掉多余的逗号-->
    <!--    <update id="updateEmployee">
            update t_employee
            <set>
                <if test="employee.lastName != null and employee.lastName != ''">
                    last_name = #{employee.lastName},
                </if>
                <if test="employee.email != null and employee.email != ''">
                    email = #{employee.email},
                </if>
                <if test="employee.gender != null and employee.gender != ''">
                    gender = #{employee.gender}
                </if>
            </set>
            <where>
                id = #{employee.id}
            </where>
        </update>-->

    <!--trim 更新时拼串-->
    <update id="updateEmployee">
        update t_employee
        <trim prefix="set" suffixOverrides=",">
            <if test="employee.lastName != null and employee.lastName != ''">
                last_name = #{employee.lastName},
            </if>
            <if test="employee.email != null and employee.email != ''">
                email = #{employee.email},
            </if>
            <if test="employee.gender != null and employee.gender != ''">
                gender = #{employee.gender}
            </if>
        </trim>
        <where>
            id = #{employee.id}
        </where>
    </update>

    <!--
        collection:指定要遍历的集合
            list类型的参数会特殊处理封装在map中，map的key就叫list
            item:将当前遍历出的元素赋值给指定的变量
            #{变量名}就能取出变量的值，也就是当前遍历的元素
            separator:每个元素之间的分隔符
            open:遍历出所有结果拼接成一个开始的字符
            index: 索引，遍历 list的时候是索引，item就是值
                        遍历 map的时候index表示map的key，item就是map的值
    -->
    <select id="getEmployeesByConditionForeach" resultType="com.dongfang.mybatis.bean.Employee">
        select * from t_employee
        <where>
            id in
            <foreach collection="ids" item="item_id"
                     separator="," open="(" close=")">
                #{item_id}
            </foreach>
        </where>

    </select>


    <!--
    MySql下批量保存，可以foreach遍历 mysql支持values(), (), ()语法
    insert into t_employee (last_name, gender, email, dept_id)
            values ('Tom', '1', 'Tom@qq.com', 1),
                   ('Frank', '0', 'Frank@gmail.com', 2);
    -->
    <insert id="addEmployee">
        <include refid="insertEmployee"></include>
        values
        <foreach collection="employees" item="employee" separator=",">
            (#{employee.lastName}, #{employee.gender}, #{employee.email}, #{employee.deptId})
        </foreach>
    </insert>

    <!--
        两个内置参数：
            不只是方法传递过来的参数可以被用来判断，取值。。。
            mybatis默认还有两个内置参数
            _parameter:  代表整个参数
                    单个参数：_parameter就是这个参数
                    多个参数：参数就会被封装成一个map，_parameter就是代表这个map
            _databaseId:如果配置为DatabaseIdProvider标签
                    _databaseId就是代表当前数据库的别名
                   bind:可以将OGNL 表达式的值绑定到一个变量中，方便后来引用这个变量的值
 <bind name="" value=""/>
 模糊查询 ，还是推荐在入口入传入
    -->

    <select id="getEmployeesByInnerParameter" resultType="com.dongfang.mybatis.bean.Employee">
        <bind name="_lastName" value="'%' + employee.lastName +'%'"/>
        <if test="_databaseId == 'mysql'">
            <include refid="selectEmployee"></include>
            <if test="employee != null">
                where last_name like #{_lastName}
            </if>
        </if>
        <if test="_databaseId == 'oracle'">
            select * from t_employee
        </if>
    </select>

    <!--抽取可重用的sql片段，方便后面引用，里面也能加判断
        1、经常将要查询的列名，或者插入用的列名抽取出来方便引用
        2、include 来引用已经抽取的sql
        3、include还可以自定义一些property，sql标签内部就能使用自定义的属性
                    ${prop} 不是用#-->
    <sql id="selectEmployee">
            select * from t_employee
    </sql>

    <sql id="insertEmployee">
        insert into t_employee (last_name, gender, email, dept_id)
    </sql>


</mapper>
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.dongfang.mybatis.dao.DepartmentMapper">
    <!--引用缓存 namespace和哪个名称空间下的缓存一样-->
    <cache-ref namespace="com.dongfang.mybatis.dao.EmployeeMapper"/>


    <select id="getDeptById" resultType="com.dongfang.mybatis.bean.Department">
        select *
        from t_department
        where id = #{id}
    </select>

    <!--

    collection嵌套结果集的方式，定义关联的集合类型元素的封装规则
    场景2：查询部门的时候，将部门对应的所有员工信息也查询出来
    前面是部门信息，后面是员工信息
    did, dept_name || eid, last_name, email, gender
-->
    <resultMap id="departWithEmp" type="com.dongfang.mybatis.bean.Department">
        <id column="id" property="id"/>
        <result column="dept_name" property="departmentName"/>
        <!--collection定义的关联的集合类型属性的封装规则
            ofType 指定集合里面元素的类型-->
        <collection property="employees" ofType="com.dongfang.mybatis.bean.Employee">
            <!--定义集合中元素的封装规则-->
            <id column="eid" property="id"/>
            <result column="last_name" property="lastName"/>
            <result column="email" property="email"/>
            <result column="gender" property="gender"/>
        </collection>
    </resultMap>
    <select id="getDeptWithEmpById" resultMap="departWithEmp">
        select td.id              did,
               td.department_name dept_name,
               te.id              eid,
               te.last_name       last_name,
               te.email           email,
               te.gender          gender
        from t_department td
                 left join t_employee te
                           on td.id = te.dept_id
        where td.id = #{id}
    </select>


    <resultMap id="deptWithEmpStep" type="com.dongfang.mybatis.bean.Department">
        <id column="id" property="id"/>
        <result column="department_name" property="departmentName"/>
        <collection property="employees"
                    select="com.dongfang.mybatis.dao.ResultAutoMapper.getAllEmpByDeptId"
                    column="{deptId=id}" fetchType="eager"/>
    </resultMap>
    <select id="getDeptWithEmpStepById" resultMap="deptWithEmpStep">
        select *
        from t_department
        where id = #{id}
    </select>


    <!--
        扩展：collection中，给select方法传递多个值，多列的值
        将多列的值封装map传递过去
        column="{key1=column1, key2=column2}"
        fetchType="lazy" 表示使用延迟加载
                -lazy 延迟
                -eager 立即 即使全局开启了延迟加载，也可以在局部设置立即加载
    -->
</mapper>